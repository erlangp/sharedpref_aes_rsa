package com.herokuapp.erlangparasu.sharedpref_aes_rsa.security

import android.util.Base64
import java.security.Key
import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec

/**
 * Original author: Yakiv Mospan (https://github.com/temyco/security-workshop-sample)
 *
 * Modified by: Erlang Parasu 2020.
 */

/**
 * This class wraps [Cipher] apis with some additional possibilities.
 *
 * @throws RuntimeException if there is no algorithm defined with [transformation]
 * @throws RuntimeException if there is no padding defined with [transformation]
 */
class CipherWrapper(private val transformation: String) {

    companion object {
        /**
         * For default created asymmetric keys
         */
        //const val TRANSFORMATION_ASYMMETRIC = "RSA/ECB/PKCS1Padding"
        const val TRANSFORMATION_ASYMMETRIC = "RSA/ECB/NoPadding"

        /**
         * For default created symmetric keys
         */
        const val TRANSFORMATION_SYMMETRIC = "AES/CBC/PKCS7Padding"

        const val IV_SEPARATOR = "."
    }

    private val cipher: Cipher = Cipher.getInstance(transformation)

    /**
     * Encrypts data using the key.
     *
     * @param data the data to encrypt
     * @param key the key to encrypt data with
     * @param useInitializationVector encrypt data using initialization vector generated by system. Vector will be added
     * as a prefix to the result of encryption, separated with [IV_SEPARATOR]. Result example - "aaaaaa.bbbbbb", where `aaaaaa`
     * is an created Initialization Vector and `bbbbbb` the  encrypted to data. `false` by default.
     *
     */
    fun encrypt(data: String, key: Key?, useInitializationVector: Boolean = false): String {
        ////val random = Random()
        //val secureRandom = SecureRandom()
        //val keyBytes = ByteArray(32)
        //secureRandom.nextBytes(keyBytes)

        cipher.init(Cipher.ENCRYPT_MODE, key)

        val builder = StringBuilder()
        if (useInitializationVector) {
            val ivByteArr: ByteArray? = cipher.iv
            if (ivByteArr != null) {
                val ivEncoded: String = Base64.encodeToString(ivByteArr, Base64.DEFAULT)
                //Log.d("TAG", "encrypt: ivEncoded: $ivEncoded")
                builder.append(ivEncoded)
                builder.append(IV_SEPARATOR)
            }
        }

        val dataByteArr: ByteArray = data.toByteArray()
        val encryptedDataByteArr: ByteArray = cipher.doFinal(dataByteArr)
        val encodedEncryptedData: String =
            Base64.encodeToString(encryptedDataByteArr, Base64.DEFAULT)

        builder.append(encodedEncryptedData)

        return builder.toString()
    }

    /**
     * Decrypts data using the key.
     *
     * @param data the data to decrypt
     * @param key the key to decrypt data with
     * @param useInitializationVector decrypt data using initialization vector. Vector must be added
     * as a prefix to the encryption data, separated with [IV_SEPARATOR]. Data example - "aaaaaa.bbbbbb", where `aaaaaa`
     * is an Initialization Vector and `bbbbbb` the  data to decrypt. `false` by default.
     */
    fun decrypt(data: String, key: Key?, useInitializationVector: Boolean = false): String {
        var encodedStr = ""

        if (useInitializationVector) {
            val split: List<String> = data.split(IV_SEPARATOR)
            if (split.size != 2) {
                throw IllegalArgumentException("Passed data is incorrect. There was no IV specified with it.")
            }

            val ivStr: String = split[0]
            encodedStr = split[1]

            val ivByteArr: ByteArray = Base64.decode(ivStr, Base64.DEFAULT)
            val ivSpec = IvParameterSpec(ivByteArr)
            cipher.init(Cipher.DECRYPT_MODE, key, ivSpec)
        } else {
            encodedStr = data
            cipher.init(Cipher.DECRYPT_MODE, key)
        }

        val encryptedDataByteArr: ByteArray = Base64.decode(encodedStr, Base64.DEFAULT)
        val decryptedDataByteArr: ByteArray = cipher.doFinal(encryptedDataByteArr)
        val strData = String(decryptedDataByteArr)

        return strData
    }

    ///**
    // * Wraps(encrypts) a key with another key.
    // */
    //fun wrapKey(keyToBeWrapped: Key, keyToWrapWith: Key?): String {
    //    cipher.init(Cipher.WRAP_MODE, keyToWrapWith)
    //    val decodedData = cipher.wrap(keyToBeWrapped)
    //    return Base64.encodeToString(decodedData, Base64.DEFAULT)
    //}

    ///**
    // * Unwraps(decrypts) a key with another key. Requires wrapped key algorithm and type.
    // */
    //fun unWrapKey(
    //    wrappedKeyData: String,
    //    algorithm: String,
    //    wrappedKeyType: Int,
    //    keyToUnWrapWith: Key?
    //): Key {
    //    val encryptedKeyData = Base64.decode(wrappedKeyData, Base64.DEFAULT)
    //    cipher.init(Cipher.UNWRAP_MODE, keyToUnWrapWith)
    //    return cipher.unwrap(encryptedKeyData, algorithm, wrappedKeyType)
    //}
}
